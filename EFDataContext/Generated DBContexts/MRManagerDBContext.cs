// <autogenerated>
//   This file was generated by T4 code generator MRManger-DBContext.tt.
//   Any changes made to this file manually will be lost next time the file is regenerated.
// </autogenerated>


using EF.Entities;
using EF.Mappings;
using Microsoft.EntityFrameworkCore;

namespace EF.DBContexts
{
	public partial class MRManagerDBContext:DbContext
	{
		public DbSet<ApplicationSetting> ApplicationSettings { get; set; }
		public DbSet<Allergies> Allergies { get; set; }
		public DbSet<Cities> Cities { get; set; }
		public DbSet<Countries> Countries { get; set; }
		public DbSet<DefaultImages> DefaultImages { get; set; }
		public DbSet<EntityAttributes> EntityAttributes { get; set; }
		public DbSet<Interviews> Interviews { get; set; }
		public DbSet<MaritalStatus> MaritalStatus { get; set; }
		public DbSet<Media> Media { get; set; }
		public DbSet<MediaTypes> MediaTypes { get; set; }
		public DbSet<MedicalCategory> MedicalCategory { get; set; }
		public DbSet<MedicalSystemInterviews> MedicalSystemInterviews { get; set; }
		public DbSet<MedicalSystems> MedicalSystems { get; set; }
		public DbSet<Occupations> Occupations { get; set; }
		public DbSet<Organisations> Organisations { get; set; }
		public DbSet<Parishes> Parishes { get; set; }
		public DbSet<PatientResponses> PatientResponses { get; set; }
		public DbSet<Patients> Patients { get; set; }
		public DbSet<PatientSyntoms> PatientSyntoms { get; set; }
		public DbSet<PatientVisit> PatientVisit { get; set; }
		public DbSet<PersonMedia> PersonMedia { get; set; }
		public DbSet<Persons> Persons { get; set; }
		public DbSet<Persons_Doctor> Persons_Doctor { get; set; }
		public DbSet<Phase> Phase { get; set; }
		public DbSet<PhoneTypes> PhoneTypes { get; set; }
		public DbSet<Questions> Questions { get; set; }
		public DbSet<Response> Response { get; set; }
		public DbSet<ResponseImages> ResponseImages { get; set; }
		public DbSet<ResponseOptions> ResponseOptions { get; set; }
		public DbSet<ResponseSuggestions_Interviews> ResponseSuggestions_Interviews { get; set; }
		public DbSet<Sex> Sex { get; set; }
		public DbSet<States> States { get; set; }
		public DbSet<SyntomMedicalSystems> SyntomMedicalSystems { get; set; }
		public DbSet<SyntomPriority> SyntomPriority { get; set; }
		public DbSet<Syntoms> Syntoms { get; set; }
		public DbSet<SyntomStatus> SyntomStatus { get; set; }
		public DbSet<Units> Units { get; set; }
		public DbSet<UserSignIn> UserSignIn { get; set; }
		public DbSet<VisitType> VisitType { get; set; }
	
		protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
		{
			optionsBuilder.UseSqlServer(DBContext.Properties.Settings.Default.DbConnectionString);
		}
	
		protected override void OnModelCreating(ModelBuilder modelBuilder)
		{
				ApplicationSettingMap.Map(modelBuilder.Entity<ApplicationSetting>());
				AllergiesMap.Map(modelBuilder.Entity<Allergies>());
				CitiesMap.Map(modelBuilder.Entity<Cities>());
				CountriesMap.Map(modelBuilder.Entity<Countries>());
				DefaultImagesMap.Map(modelBuilder.Entity<DefaultImages>());
				EntityAttributesMap.Map(modelBuilder.Entity<EntityAttributes>());
				InterviewsMap.Map(modelBuilder.Entity<Interviews>());
				MaritalStatusMap.Map(modelBuilder.Entity<MaritalStatus>());
				MediaMap.Map(modelBuilder.Entity<Media>());
				MediaTypesMap.Map(modelBuilder.Entity<MediaTypes>());
				MedicalCategoryMap.Map(modelBuilder.Entity<MedicalCategory>());
				MedicalSystemInterviewsMap.Map(modelBuilder.Entity<MedicalSystemInterviews>());
				MedicalSystemsMap.Map(modelBuilder.Entity<MedicalSystems>());
				OccupationsMap.Map(modelBuilder.Entity<Occupations>());
				OrganisationsMap.Map(modelBuilder.Entity<Organisations>());
				ParishesMap.Map(modelBuilder.Entity<Parishes>());
				PatientResponsesMap.Map(modelBuilder.Entity<PatientResponses>());
				PatientsMap.Map(modelBuilder.Entity<Patients>());
				PatientSyntomsMap.Map(modelBuilder.Entity<PatientSyntoms>());
				PatientVisitMap.Map(modelBuilder.Entity<PatientVisit>());
				PersonMediaMap.Map(modelBuilder.Entity<PersonMedia>());
				PersonsMap.Map(modelBuilder.Entity<Persons>());
				Persons_DoctorMap.Map(modelBuilder.Entity<Persons_Doctor>());
				PhaseMap.Map(modelBuilder.Entity<Phase>());
				PhoneTypesMap.Map(modelBuilder.Entity<PhoneTypes>());
				QuestionsMap.Map(modelBuilder.Entity<Questions>());
				ResponseMap.Map(modelBuilder.Entity<Response>());
				ResponseImagesMap.Map(modelBuilder.Entity<ResponseImages>());
				ResponseOptionsMap.Map(modelBuilder.Entity<ResponseOptions>());
				ResponseSuggestions_InterviewsMap.Map(modelBuilder.Entity<ResponseSuggestions_Interviews>());
				SexMap.Map(modelBuilder.Entity<Sex>());
				StatesMap.Map(modelBuilder.Entity<States>());
				SyntomMedicalSystemsMap.Map(modelBuilder.Entity<SyntomMedicalSystems>());
				SyntomPriorityMap.Map(modelBuilder.Entity<SyntomPriority>());
				SyntomsMap.Map(modelBuilder.Entity<Syntoms>());
				SyntomStatusMap.Map(modelBuilder.Entity<SyntomStatus>());
				UnitsMap.Map(modelBuilder.Entity<Units>());
				UserSignInMap.Map(modelBuilder.Entity<UserSignIn>());
				VisitTypeMap.Map(modelBuilder.Entity<VisitType>());
			}
	}
}
